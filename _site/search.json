[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About Me",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nR Shiny: Small Business Innovation Research\n\n\n\nleaflet\n\n\nR Shiny\n\n\nSBIR\n\n\n\nR Shiny Dashboard to visualize the distribution of federal funding across different states and departments from 2010 to 2019 for SBIR.\n\n\n\nBhabishya Neupane\n\n\nMar 30, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR Shiny Application: World Freedom Index\n\n\n\nR Shiny\n\n\nTidy Tuesday\n\n\nleaflet\n\n\nreactable\n\n\nreactablefmtr\n\n\ncrosstalk\n\n\n\nShiny Dashboard to visualize how World Freedom Index has over time across different regions of the world.\n\n\n\nBhabishya Neupane\n\n\nMar 28, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{dairyplantdata} R data package\n\n\n\nusethis\n\n\nr package\n\n\npkgdown\n\n\n\nThis was built to faciliate research for senior economists at the University of Nebraska - Lincoln.\n\n\n\nBhabishya Neupane\n\n\nMar 28, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR Shiny Application: Natural Gas Demand Forecast\n\n\n\nUSgas\n\n\nR Shiny\n\n\nTime Series Forecasting\n\n\n\nForecasting monthly natural gas demand in the United States until 2023-01-01 using data from USgas package in R put together by Rami Krispin, Data Science and Engineering…\n\n\n\n\n\n\nMar 28, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday: World Freedom Index\n\n\n\nggplot2\n\n\nTidy Tuesday\n\n\nwidyr\n\n\n\nI will be exploring how civil liberty and political rights score has changed over time across different regions of the world.\n\n\n\nBhabishya Neupane\n\n\nMar 28, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday: Chocolate Ratings\n\n\n\nTidy Tuesday\n\n\nggplot2\n\n\n\nVisualizing and extracting information from chocolate ratings reviewed by The Manhattan Chocolate Society\n\n\n\nBhabishya Neupane\n\n\nMar 27, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy Tuesday: Art Collection\n\n\n\nTidy Tuesday\n\n\ninfer\n\n\n\nI will be exploring infer package for statistical inference.\n\n\n\nBhabishya Neupane\n\n\nMar 26, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/2023-03-10-bhabishya-tries/2023-03-10-bhabishya-tries.html",
    "href": "posts/2023-03-10-bhabishya-tries/2023-03-10-bhabishya-tries.html",
    "title": "Bhabishya Tries",
    "section": "",
    "text": "Reusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{neupane2022,\n  author = {Bhabishya Neupane},\n  title = {Bhabishya {Tries}},\n  date = {2022-04-20},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nBhabishya Neupane. 2022. “Bhabishya Tries.” April 20, 2022."
  },
  {
    "objectID": "posts/2022-04-20_trial_post/index.html",
    "href": "posts/2022-04-20_trial_post/index.html",
    "title": "Bhabishya Neupane",
    "section": "",
    "text": "https://creativecommons.org/licenses/by/4.0/BibTeX citation:@online{neupane,\n  author = {Bhabishya Neupane},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nBhabishya Neupane. n.d."
  },
  {
    "objectID": "posts/2022-03-28-tidy-tuesday-world-freedom-index/tidy-tuesday-world-freedom-index.html",
    "href": "posts/2022-03-28-tidy-tuesday-world-freedom-index/tidy-tuesday-world-freedom-index.html",
    "title": "Tidy Tuesday: World Freedom Index",
    "section": "",
    "text": "# Analysis Pack\nlibrary(tidyverse)\nlibrary(tidytuesdayR)\nlibrary(scales)\nlibrary(infer)\n# Theming Pack\nlibrary(nationalparkcolors)\nlibrary(paletteer)\n# Styling Pack\nlibrary(reactable)\nlibrary(reactablefmtr)\nlibrary(showtext)\nlibrary(showtextdb)\nlibrary(extrafont)\nlibrary(extrafontdb)\nlibrary(gganimate)\nfont_add_google(\"BenchNine\", family = \"BenchNine\")\nshowtext_auto()"
  },
  {
    "objectID": "posts/2022-03-28-tidy-tuesday-world-freedom-index/tidy-tuesday-world-freedom-index.html#maps",
    "href": "posts/2022-03-28-tidy-tuesday-world-freedom-index/tidy-tuesday-world-freedom-index.html#maps",
    "title": "Tidy Tuesday: World Freedom Index",
    "section": "Maps",
    "text": "Maps\n\nWorld Freedom Index: Political Rights Score (2020)\ncountrycode package along with map_data(\"world\") data from ggplot2 allows for easy\nmapping methods.\n\nlibrary(countrycode)\nfreedom_joined <- freedom %>% \n  mutate(country_code = countrycode(country, \"country.name\", \"iso2c\")) %>% \n  left_join(map_data(\"world\"), by = c(\"country\" = \"region\"), suffix = c(\"\", \"_map\"))\n\nWarning in left_join(., map_data(\"world\"), by = c(country = \"region\"), suffix = c(\"\", : Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 1 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\nfreedom_joined %>% \n  filter(year == 2020) %>% \n  ggplot(aes(long, lat, group = group))+\n  geom_polygon(aes(fill = political_rights))+\n  ggthemes::theme_map()+\n  coord_map(xlim = c(-180, 180))+\n  scale_fill_gradient2(low = \"#A8CDEC\", high = \"#F6955E\", midpoint = 3.5, \n                       guide = guide_legend(reverse = TRUE))+\n  labs(fill = \"Political Rights\", \n       title = \"World Freedom Index: Political Rights Score (2020)\", \n       subtitle = \"Lower scores imply country is more free and vice-versa\")+\n  theme(text = element_text(family = \"BenchNine\"), \n        plot.title = element_text(face = \"bold\", size = 15, hjust = 0.5), \n        plot.subtitle = element_text(hjust = 0.5))\n\n\n\n\n\n\nWorld Freedom Index: Civil Liberties Score Score (2020)\n\nfreedom_joined %>% \n  filter(year == 2020) %>% \n  ggplot(aes(long, lat, group = group))+\n  geom_polygon(aes(fill = civil_liberties))+\n  ggthemes::theme_map()+\n  coord_map(xlim = c(-180, 180))+\n  scale_fill_gradient2(low = \"#A8CDEC\", high = \"#F6955E\", midpoint = 3.5, \n                       guide = guide_legend(reverse = TRUE))+\n  labs(fill = \"Civil Liberties\", \n       title = \"World Freedom Index: Civil Liberties Score (2020)\", \n       subtitle = \"Lower scores imply country is more free and vice-versa\")+\n  theme(text = element_text(family = \"BenchNine\"), \n        plot.title = element_text(face = \"bold\", size = 15, hjust = 0.5), \n        plot.subtitle = element_text(hjust = 0.5))\n\n\n\n\n\n\nWorld Freedom Index: Developed vs Least Developed Countries (2020)\n\nfreedom_joined %>% \n  filter(year == 2020) %>% \n  ggplot(aes(long, lat, group = group))+\n  geom_polygon(aes(fill = is_ldc))+\n  ggthemes::theme_map()+\n  coord_map(xlim = c(-180, 180))+\n  scale_fill_paletteer_d(\"nationalparkcolors::Arches\")+\n  labs(fill = \"\", \n       title = \"World Freedom Index: Developed vs Least Developed Countries (2020)\", \n       subtitle = \"Africa trumps all the regions when it comes to # of least developed countries\")+\n  theme(text = element_text(family = \"BenchNine\"), \n        plot.title = element_text(face = \"bold\", size = 15, hjust = 0.5), \n        plot.subtitle = element_text(hjust = 0.5))"
  },
  {
    "objectID": "posts/2022-03-28-shiny-application-world-freedom-index/shiny-application-world-freedom-index.html",
    "href": "posts/2022-03-28-shiny-application-world-freedom-index/shiny-application-world-freedom-index.html",
    "title": "R Shiny Application: World Freedom Index",
    "section": "",
    "text": "Link: World Freedom Index Shiny Dashboard"
  },
  {
    "objectID": "posts/2022-03-28-shiny-application-united-states-natural-gas-demand-forecast/shiny-application-united-states-natural-gas-demand-forecast.html",
    "href": "posts/2022-03-28-shiny-application-united-states-natural-gas-demand-forecast/shiny-application-united-states-natural-gas-demand-forecast.html",
    "title": "R Shiny Application: Natural Gas Demand Forecast",
    "section": "",
    "text": "Key Takeaways\n\nOut of all of the models, auto_arima() gave us the best forecasting accuracy.\nTBATS was the worst performing model.\nPost-forecast diagnostics inform that most of the information was extracted by the fitted models.\n\n\n\nImprovisation\n\nML models like XGBoost, or a combination of XGBoost and PROPHET could potentially give us a better accuracy. XGBoost by itself is great at picking up patterns, but when combined with PROPHET (given the seasonality parameter is turned off for PROPHET), it would be ideal at picking up multiple seasonalities.\nAbove recommendation is a potential method and by no means a solution. The best way to find out would be to fit the model and observe the accuracy metrics."
  },
  {
    "objectID": "posts/2022-03-28-tidy-tuesday-chocolate-ratings/tidy-tuesday-chocolate-ratings.html",
    "href": "posts/2022-03-28-tidy-tuesday-chocolate-ratings/tidy-tuesday-chocolate-ratings.html",
    "title": "Tidy Tuesday: Chocolate Ratings",
    "section": "",
    "text": "Data\n\nchocolate <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-18/chocolate.csv') %>% \n  mutate(first_memorable_characteristics = str_remove(most_memorable_characteristics, pattern = \",.*\"))\n\n\n\nExploratory Data Visualization\n\nchocolate %>% \n  count(company_location, sort = TRUE) %>% \n  reactable::reactable()\n\n\n\n\n# Commonly used ingredients in chocolate manufacturing companies across the world\nchocolate %>% \n  filter(!is.na(ingredients)) %>% \n  add_count(ingredients) %>% \n  filter(n>= 100) %>% \n  count(ingredients, sort = TRUE) %>% \n  mutate(ingredients = ingredients %>% fct_reorder(n)) %>% \n  ggplot(aes(n, ingredients))+\n  geom_col(fill = \"#769370\", alpha = 0.8)+\n  labs(x = \"\", y = \"Ingredients\", \n       subtitle = \"<span style = 'color:#454B68'>B stands for Beans, S stands for Sugar, C stands for Cocoa Butter, L stands for Lecithin, and V stands for Vanilla</span>\",\n       title = \"Commonly Used Ingredients by the Chocolate Manufacturing Companies\", \n       caption = \"Data Source: The Manhattan Chocolate Society\")+\n  theme(text = element_text(family = \"BenchNine\"), \n        plot.title = element_text(size = 17, face = \"bold\"), \n        plot.subtitle = element_markdown())\n\n\n\n\n\ntop_8_most_reviewed_countries <- chocolate %>% \n  count(company_location, sort = T) %>% \n  filter(n >= 50) %>% \n  pull(company_location)\n\nchocolate %>% \n  mutate(cocoa_percent = parse_number(cocoa_percent)) %>% \n  add_count(company_location) %>%\n  mutate(company_location_and_reviews = glue(\"{company_location} ({n})\")) %>% \n  group_by(review_date, company_location_and_reviews, company_location) %>% \n  summarize(categories = n(),\n            avg_rating     = mean(rating),\n            max_rated_manufacturer = first(company_manufacturer[which.max(rating)]),\n            min_rated_manufacturer = first(company_manufacturer[which.min(rating)]),\n            max_rated_manufacturer_rating = first(rating[which.max(rating)]),\n            min_rated_manufacturer_rating = first(rating[which.min(rating)])) %>% \n  ungroup() %>% \n  add_count(company_location) %>% \n  mutate(company_location_and_reviews = company_location_and_reviews %>% fct_reorder(-n)) %>% \n  filter(company_location %in% top_8_most_reviewed_countries) %>% \n  pivot_longer(cols = c(avg_rating, max_rated_manufacturer_rating, min_rated_manufacturer_rating), names_to = \"metrics\") %>% \n  ggplot(aes(review_date, value, color = metrics))+\n  geom_line(size = 0.8)+\n  facet_wrap(~company_location_and_reviews)+\n  theme(text = element_text(family = \"BenchNine\"),\n        plot.title = element_text(size = 15))+\n  labs(x = \"\", \n       y = \"Ratings\",\n       title = \"Top 8 Frequently Reviewed Chocolate Manufacturing Countries w/ Ratings\",\n       subtitle = \"Number inside the parenthesis denotes the number of reviews conducted in said country, 2006-2021\",\n       color = \"Metrics\", \n       caption = \"Data Source: The Manhattan Chocolate Society\")+\n  scale_color_paletteer_d(\"nationalparkcolors::SmokyMountains\")+\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\nWhere does most reviews come from?\n\nchocolate %>% \n  add_count(company_location) %>% \n  arrange(desc(n)) %>% \n  filter(n >= 50) %>% \n  count(company_location, sort = T) %>% \n  mutate(company_location = company_location %>% fct_reorder(n)) %>% \n  ggplot(aes(n, company_location))+\n  geom_col(fill = \"#769370\")+\n  labs(x = \"\", \n       y = \"\")+\n  scale_x_continuous(limits = c(0, 1200), breaks = seq(0, 1200, by = 200))+\n  labs(title = \"Top 8 Frequently Reviewed Chocolate Manufacturing Countries\",\n       subtitle = \"The review was conducted by The Manhattan Chocolate Society\",\n       caption   = \"Data Source: The Manhattan Chocolate Society\")+\n  theme(text = element_text(family = \"BenchNine\"),\n        legend.position = \"none\",\n        plot.title = element_text(size = 20))\n\n\n\n\n\n\nCommonly Used Ingredients in Chocolate Manufacturing Companies Across the World\n\nchocolate %>%\n  mutate(company_location = company_location %>% fct_lump(10)) %>%\n  filter(!is.na(ingredients)) %>%\n  add_count(ingredients) %>%\n  filter(n > 200) %>%  # keeping ingredients that occur more than 100 times in the dataset\n  select(-n) %>%\n  group_by(company_location) %>%\n  add_count(ingredients) %>%\n  ungroup() %>%\n  mutate(\n    company_location = company_location %>% fct_relevel(\n      c(\n        \"U.S.A.\",\n        \"Other\",\n        \"Canada\",\n        \"France\",\n        \"U.K.\",\n        \"Italy\",\n        \"Belgium\",\n        \"Ecuador\",\n        \"Australia\",\n        \"Switzerland\",\n        \"Germany\"\n      )\n    ),\n    company_location = company_location %>% fct_reorder(n, .fun = sum)\n  ) %>%\n  ggplot(aes(n, company_location, fill = ingredients)) +\n  geom_col(position = \"dodge\", width = 0.5) +\n  theme(\n    text = element_text(family = \"BenchNine\"),\n    legend.position = \"top\",\n    plot.title = element_text(size = 15, face = \"bold\")\n  ) +\n  scale_fill_paletteer_d(\"nationalparkcolors::SmokyMountains\") +\n  labs(y = \"\",\n       x = \"Frequency\",\n       fill = \"Ingredients\",\n       title = \"Frequently Used Ingredients in Chocolate Manufacturing Companies around the World\",\n       subtitle = \"B stands for Beans, S stands for Sugar, C stands for Cocoa Butter, and L stands for Lecithin\", \n       caption = \"Data Source: The Manhattan Chocolate Society\")\n\n\n\n\n\n\nTen most frequently reviewed companies in the United States\n\nchocolate %>% \n  filter(company_location == \"U.S.A.\") %>% \n  add_count(company_manufacturer) %>% \n  filter(n >= 15) %>% \n  count(company_manufacturer, sort = T) %>% \n  mutate(company_manufacturer = company_manufacturer %>% fct_reorder(n)) %>% \n  slice(1:10) %>% \n  ggplot(aes(n, company_manufacturer))+\n  geom_col(fill = \"#769370\")+\n  labs(x = \"\", \n       y = \"\", \n       title = \"Top 10 Frequently Reviewed Chocolate Manufacturing Companies in the United States\", \n       caption = \"Data Source: The Manhattan Chocolate Society\")+\n  theme(text = element_text(family = \"BenchNine\"),\n        plot.title = element_text(size = 12.5))\n\n\n\n\n\n\nCocoa Percent Distribution\n\nIn the United States\n\nchocolate %>% \n  filter(company_location == \"U.S.A.\") %>% \n  mutate(cocoa_percent = parse_number(cocoa_percent)) %>% \n  ggplot(aes(cocoa_percent))+\n  geom_histogram(color = \"white\", fill = \"#769370\")+\n  expand_limits(x = 50)+\n  labs(y = \"# of Chocolate Manufacturing Companies\", \n       x = \"Cocoa Percent\",\n       title = \"Cocoa Percent Distribution Histogram | U.S.A.\",\n       caption = \"Data Source: The Manhattan Chocolate Society\")+\n  theme(text = element_text(family = \"BenchNine\"),\n        plot.title = element_text(size = 20))+\n  scale_x_continuous(labels = scales::percent_format(scale = 1/1))\n\n\n\n\nFrom the above plot, it does look like most of the companies reviewed by The Manhattan Chocolate Society had cocoa in their products between 70% to 75%.\n\n\nAcross the World\n\nchocolate %>% \n  mutate(cocoa_percent = parse_number(cocoa_percent)) %>% \n  ggplot(aes(cocoa_percent))+\n  geom_histogram(color = \"white\", fill = \"#769370\")+\n  expand_limits(x = 40)+\n  labs(y = \"# of Chocolate Manufacturing Companies\", \n       x = \"Cocoa Percent\",\n       title = \"Cocoa Percent Distribution Histogram | Globally\", \n       caption = \"Data Source: The Manhattan Chocolate Society\")+\n  theme(text = element_text(family = \"BenchNine\"),\n        plot.title = element_text(size = 20))+\n  scale_x_continuous(labels = scales::percent_format(scale = 1/1))\n\n\n\n\n\n\n\nWord Used to Describe the Chocolate in the USA\n\nchocolate %>%\n  filter(company_location == \"U.S.A.\") %>%\n  add_count(first_memorable_characteristics) %>%\n  filter(n > 28) %>%\n  mutate(first_memorable_characteristics = glue(\"{first_memorable_characteristics} ({n})\"), \n         first_memorable_characteristics = first_memorable_characteristics %>% fct_reorder(n)) %>% \n  ggplot(\n    aes(rating, first_memorable_characteristics, fill = first_memorable_characteristics)\n  ) +\n  geom_density_ridges(alpha = 0.9) +\n  theme(legend.position = \"none\") +\n  scale_fill_paletteer_d(\"nationalparkcolors::GeneralGrant\")+\n  theme(text = element_text(family = \"BenchNine\"), \n        plot.title = element_text(size = 17, face = \"bold\"))+\n  labs(y = \"First Memorable Characteristic of the Chocolate\", \n       x = \"Rating\", \n       title = \"Distribution of Chocolate's First Memorable Characteristics in the USA\", \n       caption = \"Data Source: The Manhattan Chocolate Society\")\n\n\n\n\n\nfreq_reviewed_4_us_companies <- chocolate %>% \n  filter(company_location == \"U.S.A.\") %>% \n  count(company_manufacturer, sort = T) %>% \n  slice(1:4)\n\nfreq_reviewed_4_us_companies %>% \n  reactable::reactable()\n\n\n\n\n\n\nchocolate %>% \n  filter(company_location == \"U.S.A.\", \n         company_manufacturer %in% (freq_reviewed_4_us_companies %>% pull(company_manufacturer))) %>% \n  mutate(first_memorable_characteristics = first_memorable_characteristics %>% fct_lump(4)) %>% \n  count(company_manufacturer, first_memorable_characteristics, sort = T) %>% \n  ggplot(aes(first_memorable_characteristics, n))+\n  geom_col(fill = \"#769370\")+\n  facet_wrap(~company_manufacturer, scales = \"free_y\")+\n  theme(text = element_text(family = \"BenchNine\"),\n        plot.title = element_text(size = 12.5))+\n  labs(x = \"Memorable Characteristics\", y = \"\", \n       title = \"Words used to describe the highly reviewed chocolate companies in the United States\",\n       caption = \"Data Source: The Manhattan Chocolate Society\")\n\n\n\n\nThe plot isn’t super informative, but Guittard products were described as “creamy” and “sweet” more often than not."
  },
  {
    "objectID": "posts/2022-03-28-tidy-tuesday-art-collections/tidy-tuesday-art-collections.html",
    "href": "posts/2022-03-28-tidy-tuesday-art-collections/tidy-tuesday-art-collections.html",
    "title": "Tidy Tuesday: Art Collection",
    "section": "",
    "text": "Data\n\nartwork <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-01-12/artwork.csv')\nartists <- readr::read_csv(\"https://github.com/tategallery/collection/raw/master/artist_data.csv\")\n\n\nartwork_artist_tbl <- artwork %>% \n  left_join(artists, by = c(\"artist\" = \"name\"), suffix = c(\"\", \"_ar_df\")) %>% \n  separate(placeOfBirth, into = c(\"city\", \"country\"), sep = \", \", extra = \"merge\")\nartwork_artist_tbl %>% \n  filter(!is.na(country)) %>% \n  count(country, sort = T) %>% \n  reactable::reactable(\n    theme = espn(font_size = 12, centered = TRUE), \n    \n    columns = list(\n      \n      country = colDef(name = \"Country\", align = \"center\"),\n      n       = colDef(name = \"No. of Occurrences\", align = \"center\")\n      \n    )\n  )\n\n\n\n\n\nTate Art Museum is a museum based in the United Kingdom, so I am not really surprised to see the UK arts being reported more frequently in this dataset.\n\nartwork_artist_tbl %>% \n  count(country, artist, sort = T) |> \n  reactable(\n    theme = espn(font_size = 12), \n    \n    columns = list(\n      country = colDef(name = \"Country\", align = \"center\"), \n      \n      artist = colDef(name = \"Artist\", align = \"center\"), \n      \n      n      = colDef(name = \"No. of Occurrences\", align = \"center\")\n    )\n  )\n\n\n\n\n\nA lot of the United Kingdom’s records in this dataset comes from Turner, Joseph Mallord William. According to Wikipedia, he was known as romantic painter, print maker, and water colorist. I am googling his paintings right now, and they are something.\n\n\nStatistical Inference\nI am interested in learning more about the average dimension of the arts (average height, width, and depth). I think one way to go about this would be to collect all the arts available in the world and measure their dimension which is not just super expensive but also impossible. Another way to learn about the average dimension of the art would be to create bootstrap resamples and calculate their means.\n\nAssumptions:\n\nI am assuming this dataset to be randomly sampled, so that any inference made using this sample can be generalized.\nI am assuming this dataset to be representative of all of the art works around the world.\n\nMy population parameter of interest is the average dimension of an art which is unknown. However, I have this dataset as a sample. I am going to consider using this sample to create bootstrapped resamples and calculate the average dimension on those bootstrapped resamples. In order to proceed ahead, I am going to use infer for virtual bootstrap simulation and inference. Go check out infer package!!!\n\n\n\nDistribution of dimensions from the sample\n\nartwork_artist_tbl %>%\n  filter(!is.na(height)) %>%\n  ggplot(aes(height)) +\n  geom_histogram(color = \"white\", fill = \"#F6955E\", alpha = 0.8) +\n  scale_x_log10() +\n  geom_vline(xintercept = artwork_artist_tbl %>% summarize(avg_height = mean(height, na.rm = T)) %>% pull(avg_height), lty = 2, size = 1.5)+\n  theme_minimal()+\n  theme(text = element_text(family = \"BenchNine\"), \n        plot.title = element_text(size = 15, face = \"bold\", hjust = 0.5), \n        plot.subtitle = element_text(hjust = 0.5))+\n  labs(x = \"Height (mm)\", \n       y = \"# of arts\", \n       title = \"Distribution of Height\", \n       subtitle = \"The dashed line represents the average height of art works from original sample i.e. 346.88 mm, and x-axis is log scaled\")\n\n\n\n\n\nartwork_artist_tbl %>%\n  filter(!is.na(width)) %>%\n  ggplot(aes(width)) +\n  geom_histogram(color = \"white\", fill = \"#F6955E\", alpha = 0.8) +\n  scale_x_log10() +\n  geom_vline(xintercept = artwork_artist_tbl %>% summarize(avg_width = mean(width, na.rm = T)) %>% pull(avg_width), lty = 2, size = 1.5)+\n  theme_minimal()+\n  theme(text = element_text(family = \"BenchNine\"), \n        plot.title = element_text(size = 15, face = \"bold\", hjust = 0.5), \n        plot.subtitle = element_text(hjust = 0.5))+\n  labs(x = \"Width (mm)\", \n       y = \"# of arts\", \n       title = \"Distribution of Width\", \n       subtitle = \"The dashed line represents the average depth of artworks from original sample i.e. 323.81 mm, and x-axis is log scaled\")\n\n\n\n\n\nartwork_artist_tbl %>%\n  filter(!is.na(depth)) %>%\n  ggplot(aes(depth)) +\n  geom_histogram(color = \"white\", fill = \"#F6955E\", alpha = 0.8) +\n  scale_x_log10() +\n  geom_vline(xintercept = artwork_artist_tbl %>% summarize(avg_depth = mean(depth, na.rm = T)) %>% pull(avg_depth), lty = 2, size = 1.5)+\n  theme_minimal()+\n  theme(text = element_text(family = \"BenchNine\"), \n        plot.title = element_text(size = 15, face = \"bold\", hjust = 0.5), \n        plot.subtitle = element_text(hjust = 0.5))+\n  labs(x = \"Depth (mm)\", \n       y = \"# of arts\", \n       title = \"Distribution of Depth\", \n       subtitle = \"The dashed line represents the average depth of art works from original sample i.e. 477.11 mm, and x-axis is log scaled\")\n\n\n\n\nSince, I have assumed this dataset to be representative of all art works around the world. I think a good starting point to think of average dimension would be to calculate the averages from this dataset which is 346.88 mm in height, 323.81 mm in width, and 477.11 mm in depth.\n\n\nResampling\nI will perform a 1000 bootstrap resample on my original sample which is this dataset and calculate averages on the resamples for height, width, and depth.\nI am not going to get into explaining what confidence interval and p-values are. I think a good place to learn about them using this similar workflow would be Statistical Inference via Data Science. I would highly recommend checking out this book if you want to have a clear concept on standard error, confidence intervals, resampling, bootstraps, hypothesis testing, etc.\n\nBootstrap Distribution of Height\n\nartwork_height_bootstrapped_means <- artwork_artist_tbl %>% \n  filter(!is.na(height)) %>%\n  rowid_to_column(var = \"ID\") %>% \n  select(ID, height) %>% \n  specify(response = height) %>% \n  generate(reps = 1000, type = \"bootstrap\") %>% \n  calculate(stat = \"mean\")\n\n\nheight_ci_endpoints <- artwork_height_bootstrapped_means %>% \n  get_ci()\nartwork_height_bootstrapped_means %>%\n  ggplot(aes(stat)) +\n  geom_histogram(fill = \"#F6955E\", color = \"white\") +\n  shade_ci(\n    endpoints = height_ci_endpoints,\n    color = \"midnightblue\",\n    fill = \"#A8CDEC\",\n    linetype = \"dashed\"\n  ) +\n  labs(title   = \"Simulation-Based Bootstrap Distribution of Height\",\n       y       = \"# of resamples\",\n       x       = \"Resampled Means\") +\n  geom_vline(\n    xintercept = artwork %>% summarize(avg_height = mean(height, na.rm = T)) %>% pull(avg_height),\n    color = \"midnightblue\",\n    size  = 1.5,\n    lty = 5\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"BenchNine\"),\n    plot.title = element_text(size = 15, face = \"bold\", hjust = 0.5)\n  )\n\n\n\n\n\n\nBootstrap Distribution of Width\n\nartwork_width_bootstrapped_means <- artwork_artist_tbl %>% \n  filter(!is.na(width)) %>%\n  rowid_to_column(var = \"ID\") %>% \n  select(ID, width) %>% \n  specify(response = width) %>% \n  generate(reps = 1000, type = \"bootstrap\") %>% # generating 1000 bootstrapped \n  calculate(stat = \"mean\")\n\n\nwidth_ci_endpoints <- artwork_width_bootstrapped_means %>% \n  get_ci()\nartwork_width_bootstrapped_means %>%\n  ggplot(aes(stat)) +\n  geom_histogram(fill = \"#F6955E\", color = \"white\") +\n  shade_ci(\n    endpoints = width_ci_endpoints,\n    color = \"midnightblue\",\n    fill = \"#A8CDEC\",\n    linetype = \"dashed\"\n  ) +\n  labs(title   = \"Simulation-Based Bootstrap Distribution of Width\",\n       y       = \"# of resamples\",\n       x       = \"Resampled Means\") +\n  geom_vline(\n    xintercept = artwork %>% summarize(avg_width = mean(width, na.rm = T)) %>% pull(avg_width),\n    color = \"midnightblue\",\n    size  = 1.5,\n    lty = 5\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"BenchNine\"),\n    plot.title = element_text(size = 15, face = \"bold\", hjust = 0.5)\n  )\n\n\n\n\n\n\nBootstrap Distribution of Depth\n\nartwork_depth_bootstrapped_means <- artwork_artist_tbl %>% \n  filter(!is.na(depth)) %>%\n  rowid_to_column(var = \"ID\") %>% \n  select(ID, depth) %>% \n  specify(response = depth) %>% \n  generate(reps = 1000, type = \"bootstrap\") %>% # generating 1000 bootstrapped \n  calculate(stat = \"mean\")\n\n\ndepth_ci_endpoints <- artwork_depth_bootstrapped_means %>% \n  get_ci()\nartwork_depth_bootstrapped_means %>%\n  ggplot(aes(stat)) +\n  geom_histogram(fill = \"#F6955E\", color = \"white\") +\n  shade_ci(\n    endpoints = depth_ci_endpoints,\n    color = \"midnightblue\",\n    fill = \"#A8CDEC\",\n    linetype = \"dashed\"\n  ) +\n  labs(title   = \"Simulation-Based Bootstrap Distribution of Depth\",\n       y       = \"# of resamples\",\n       x       = \"Resampled Means\") +\n  geom_vline(\n    xintercept = artwork %>% summarize(avg_depth = mean(depth, na.rm = T)) %>% pull(avg_depth),\n    color = \"midnightblue\",\n    size  = 1.5,\n    lty = 5\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(family = \"BenchNine\"),\n    plot.title = element_text(size = 15, face = \"bold\", hjust = 0.5)\n  )\n\n\n\n\n\n\n\nConclusion\nFrom the simulated plots above, we can see that if we were to repeat the same sampling procedure a large number of times, we expect about 95% of the intervals to capture the value of the true population parameter. In this case, we can see our original sample mean is captured in the 95% confidence interval (percentile method)."
  },
  {
    "objectID": "posts/2022-03-30-r-shiny-small-business-innovation-research/r-shiny-small-business-innovation-research.html",
    "href": "posts/2022-03-30-r-shiny-small-business-innovation-research/r-shiny-small-business-innovation-research.html",
    "title": "R Shiny: Small Business Innovation Research",
    "section": "",
    "text": "About the Project\nThis shiny dashboard was put together in a very short notice. I worked on this project two weeks before my graduation and there were a lot of changes that were made on this dashboard.\n\nAbout SBIR\nThe Small Business Innovation Research (SBIR) programs is a competitive program that encourages small businesses to engage in Federal Research/Research and Development (R/R&D) with the potential for commercialization. Through a competitive awards-based program, SBIR awards enable small businesses to explore their technological potential and provide the incentive to profit from its commercialization.\n\n\nResources that helped me\n\nInteractive chloropleth map with leaflet and shiny"
  },
  {
    "objectID": "posts/2022-03-28-dairyplantdata-r-data-package/dairyplantdata-r-data-package.html",
    "href": "posts/2022-03-28-dairyplantdata-r-data-package/dairyplantdata-r-data-package.html",
    "title": "{dairyplantdata} R data package",
    "section": "",
    "text": "How to use?\n\nRun the following piece of code:\n\n\n# install.package(\"remotes\")   #In case you have not installed it.\nremotes::install_github(\"nBhabish/dairyplantdata\")\n\ndairyplantdata::dairy_plant_data"
  }
]